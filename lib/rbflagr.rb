=begin
#Flagr

#Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 

OpenAPI spec version: 1.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

# Common files
require 'rbflagr/api_client'
require 'rbflagr/api_error'
require 'rbflagr/version'
require 'rbflagr/configuration'

# Models
require 'rbflagr/models/constraint'
require 'rbflagr/models/create_constraint_request'
require 'rbflagr/models/create_flag_request'
require 'rbflagr/models/create_segment_request'
require 'rbflagr/models/create_variant_request'
require 'rbflagr/models/distribution'
require 'rbflagr/models/error'
require 'rbflagr/models/eval_context'
require 'rbflagr/models/eval_debug_log'
require 'rbflagr/models/eval_result'
require 'rbflagr/models/evaluation_batch_request'
require 'rbflagr/models/evaluation_batch_response'
require 'rbflagr/models/evaluation_entity'
require 'rbflagr/models/flag'
require 'rbflagr/models/flag_snapshot'
require 'rbflagr/models/put_distributions_request'
require 'rbflagr/models/put_flag_request'
require 'rbflagr/models/put_segment_reorder_request'
require 'rbflagr/models/put_segment_request'
require 'rbflagr/models/put_variant_request'
require 'rbflagr/models/segment'
require 'rbflagr/models/segment_debug_log'
require 'rbflagr/models/set_flag_enabled_request'
require 'rbflagr/models/variant'

# APIs
require 'rbflagr/api/constraint_api'
require 'rbflagr/api/distribution_api'
require 'rbflagr/api/evaluation_api'
require 'rbflagr/api/export_api'
require 'rbflagr/api/flag_api'
require 'rbflagr/api/health_api'
require 'rbflagr/api/segment_api'
require 'rbflagr/api/variant_api'

module Flagr
  class << self
    # Customize default settings for the SDK using block.
    #   Flagr.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
